class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class Circularsingle:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = self.head
            return 
        curr = self.head
        while curr.next != self.head:
            curr = curr.next
        curr.next = new_node
        new_node.next = self.head
    
    def display(self):
        if not self.head:
            print("not list")
            return 
        curr = self.head
        while curr:
            print(curr.data, end="-->")
            curr = curr.next
            if curr == self.head:
                break
        print("(head)")

    def append_head(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = self.head
        else:
            curr = self.head
            while curr.next != self.head:
                curr = curr.next
            new_node.next = self.head
            curr.next = new_node
            self.head = new_node
            # curr.next = new_node
            # new_node.next = self.head
            # self.head = new_node
            
        
    def clear(self):
        self.head = None

    def search(self, data):
        if not self.head:
            return 
        index = 0
        curr = self.head
        while True:
            if curr.data == data:
                print("data", curr.data, index)
                return 
            curr = curr.next
            index += 1
            if curr == self.head:
                break
        print("not found")

    def length(self):
        if not self.head:
            return 0
        curr = self.head
        index = 1
        while curr.next != self.head:
            index += 1
            curr = curr.next
        print(index)

    def insert_tail(self, node, data):
        if self.head is None:
            return 
        curr = self.head
        new_node = Node(data)
        # while curr and curr.data != node:
        #     curr = curr.next
        # if curr == self.head:
        #     print("not found")
        #     return 
        # new_node = Node(data)
        # new_node.next = curr.next
        # curr.next = new_node
        while True:
            if curr.data == node:
                new_node.next = curr.next
                curr.next = new_node
                return 
            curr = curr.next
            if curr == self.head:
                break
        print("not found")

    def insert_before_node(self, node, data):
        if self.head is None:
            print("not found")
            return
        new_node = Node(data)
        if self.head.data == node:
            curr = self.head
            while curr.next != self.head:
                curr = curr.next
            curr.next = new_node
            new_node.next = self.head
            self.head = new_node
            return
        curr = self.head
        while curr.next != self.head and curr.next.data != node:
            curr = curr.next
        if curr.next.data == node:
            new_node.next = curr.next
            curr.next = new_node
        else:
            print("not found")
            return   

             # while True:
            #     if curr.data != node:
            #         prev = curr
            #         curr = curr.next
            #     else:
            #         prev.next = new_node
            #         new_node.next = curr      

    def deletion(self, pos):
        if not self.head:
            print("not")
            return
        if pos == 0:
            curr = self.head.next
            self.head = curr
        index = 0
        curr = self.head
        while curr.next != self.head and index < pos - 2:
            curr = curr.next
            index += 1
        if curr.next == self.head:
            print("not found")
            return 
        curr.next = curr.next.next

    def deletion_end(self):
        if self.head is None:
            return 
        curr = self.head
        while curr.next.next != self.head:
            curr = curr.next
        curr.next = self.head

    def reverse(self):
        if self.head is None or self.head.next == self.head:
            return 
        curr = self.head
        prev = None
        while True:
            new_node = curr.next
            curr.next = prev
            prev = curr
            curr = new_node
            if curr == self.head:
                break
        self.head.next = prev
        self.head = prev
        
    def duplicates(self):
        if self.head is None:
            return 
        curr = self.head
        seen = set()
        seen.add(curr.data)
        while curr.next != self.head:
            if curr.next.data in seen:
                curr.next = curr.next.next
            else:
                seen.add(curr.next.data)
                curr = curr.next
        if curr.next.data in seen:
            curr.next = self.head

node = Circularsingle()
for i in range(4):
    node.append(i)
node.display()
node.clear()
for i in range(4):
    node.append_head(i)

node.display()
node.search(1)
node.length()
node.insert_tail(0, 10)
node.display()
print("before")
node.insert_before_node(3, 2)
node.display()
node.deletion(1)
print("deletion place")
node.display()
node.deletion_end()
node.display()
node.reverse()
node.display()
print("duplicates")
node.append_head(0)
node.display()
node.duplicates()
node.display()
